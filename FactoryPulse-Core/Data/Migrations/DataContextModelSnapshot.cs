// <auto-generated />
using System;
using FactoryPulse_Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FactoryPulse_Core.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FactoryPulse_Core.Entities.Inventory", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemID"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("ItemID");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("FactoryPulse_Core.Entities.Machine", b =>
                {
                    b.Property<int>("MachineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MachineID"));

                    b.Property<DateTime>("LastMaintenance")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MachineID");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("FactoryPulse_Core.Entities.SensorData", b =>
                {
                    b.Property<int>("DataID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DataID"));

                    b.Property<float>("Humidity")
                        .HasColumnType("real");

                    b.Property<int>("MachineID")
                        .HasColumnType("integer");

                    b.Property<float>("Pressure")
                        .HasColumnType("real");

                    b.Property<float>("RPM")
                        .HasColumnType("real");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Vibration")
                        .HasColumnType("real");

                    b.HasKey("DataID");

                    b.HasIndex("MachineID");

                    b.ToTable("SensorData");
                });

            modelBuilder.Entity("FactoryPulse_Core.Entities.WorkOrder", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderID"));

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IssueType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MachineID")
                        .HasColumnType("integer");

                    b.HasKey("OrderID");

                    b.HasIndex("MachineID");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("FactoryPulse_Core.Entities.SensorData", b =>
                {
                    b.HasOne("FactoryPulse_Core.Entities.Machine", "Machine")
                        .WithMany("SensorData")
                        .HasForeignKey("MachineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("FactoryPulse_Core.Entities.WorkOrder", b =>
                {
                    b.HasOne("FactoryPulse_Core.Entities.Machine", "Machine")
                        .WithMany("WorkOrders")
                        .HasForeignKey("MachineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("FactoryPulse_Core.Entities.Machine", b =>
                {
                    b.Navigation("SensorData");

                    b.Navigation("WorkOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
